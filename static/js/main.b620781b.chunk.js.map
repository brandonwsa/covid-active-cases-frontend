{"version":3,"sources":["components/Nav.tsx","contexts/stateContext.tsx","utilities/DateFormatter.tsx","components/Chart.tsx","components/PercentChart.tsx","components/EmptyChart.tsx","utilities/NumberFormatter.tsx","utilities/MakeDate.tsx","utilities/SelectCases.tsx","utilities/CalcTotalCases.tsx","utilities/CalcPastPercentages.tsx","components/Cases.tsx","components/Dropdown.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Nav","className","href","initContext","state","abbr","setState","Error","stateContext","React","createContext","StateProvider","children","useState","Provider","value","formatDate","date","dateStr","toString","year","substring","month","day","concat","Chart","props","chartLabel","dateLabels","positiveIncreaseData","i","push","positiveIncrease","e","console","log","chartData","labels","datasets","label","data","backgroundColor","stateAbbr","prevProps","this","newData","options","maintainAspectRatio","responsive","height","Component","PercentChart","percents","percentData","color","forEach","p","percent","error","setChartData","useMemo","EmptyChart","formatNumber","num","numStr","length","makeDate","getFullYear","getMonth","getDate","selectCases","cases","numOfPastDays","pastCases","casesAdded","c","singleCase","calcTotalCases","totalCases","calcPastPercentages","population","percentages","totalPositiveCases","j","Number","toFixed","reverse","Cases","useContext","setCases","useEffect","a","url","toLowerCase","fetch","response","json","getCases","currentDate","setCurrentDate","pastPercentages","setPastPercentages","pastTwoWeeksCases","setPastTwoWeeksCases","totalActiveCases","setTotalActiveCases","fourWeeksAgo","Date","now","fourWeeksAgoDate","pastFourWeeksCases","pastPercentagesOfActiveCases","twoWeeksAgo","twoWeeksAgoDate","map","find","Dropdown","states","onChange","target","selectedIndex","text","currentTarget","defaultValue","s","App","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b620781b.chunk.js","sourcesContent":["/**\r\n * top navigation bar\r\n */\r\n\r\nconst Nav = () => {\r\n    return (\r\n    <header className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a className=\"navbar-brand me-0 px-3\" href=\"javascript:void(0)\">COVID-19 Active Cases</a>\r\n        <a className=\"portfolio me-0 px-3\" href=\"https://brandonwsa.github.io/\">My Portfolio</a>\r\n\r\n    </header>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React, { Dispatch, SetStateAction } from \"react\";\nimport { useState } from \"react\";\n\n/**\n * Allows access to state name and abbreviation from different components.\n * \n * State Context holds: \n *  state: string (name of state)\n *  abbr: string (state abbreviation)\n *  setState: Dispatch<SetStateAction<Context>> (setState method)\n */\n\ntype Context = {\n    state: string;\n    abbr: string;\n    setState: Dispatch<SetStateAction<Context>>;\n}\n\nconst initContext = {\n    state: \"\",\n    abbr: \"\",\n    setState: (state: SetStateAction<Context>): void => {\n        throw new Error('setState function must be overriden'); //incase someone forgets to override the function.\n    },\n};\n\n//create the context\nexport const stateContext = React.createContext(initContext)\n\n//create provider\nconst StateProvider: React.FC = ({children}) => {\n    const [state, setState] = useState<Context>(initContext)\n\n    return (\n        <stateContext.Provider value={{...state, setState}}>\n                {children}\n        </stateContext.Provider>\n    );\n}\n\nexport default StateProvider;","/**\r\n * Takes a date in number YYYYMMDD and converts it to a string form of MM-DD-YYYY.\r\n * \r\n * @param date :number. Date in number form, passed in from user. Must be in YearMonthDay format. IE: 20210125\r\n * \r\n * @returns date in MM-DD-YYYY form as string.\r\n * \r\n */\r\n\r\nconst formatDate = (date: number) => {\r\n    //get the year month day\r\n    let dateStr: string = date.toString();\r\n    let year: string = dateStr.substring(0, 4);\r\n    let month: string = dateStr.substring(4, 6);\r\n    let day: string = dateStr.substring(6, 8);\r\n\r\n    //format and return\r\n    return month.concat(\"-\").concat(day).concat(\"-\").concat(year);\r\n}\r\n\r\nexport default formatDate;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Case} from \"../interfaces/case\";\r\nimport formatDate from \"../utilities/DateFormatter\";\r\n\r\n/**\r\n * A chart that displays the states positive increase in numbers from the past two weeks.\r\n * Takes a Case[] and puts the data in a Line Chart.\r\n * \r\n * Uses class component to practice components\r\n * \r\n * @props Cases array of type Case[]\r\n */\r\n\r\nclass Chart extends React.Component<Case[], {chartData:{}, stateAbbr:string}>{\r\n\r\n    constructor(props: Case[], chartLabel: string){\r\n        super(props);\r\n\r\n        //make the label array with dates. Have to use for loop since this.props.map and forEach are undefined.\r\n        let dateLabels: string[] = [];\r\n        let positiveIncreaseData: number[] = [];\r\n        let state: string = \"\"; //the state abbreviation. IE: 'il'\r\n        try{\r\n            for (let i=13; i>=0; i--){\r\n                dateLabels.push(formatDate(this.props[i].date));\r\n                positiveIncreaseData.push(this.props[i].positiveIncrease);\r\n            }\r\n            //get the state abbreviation\r\n            state = this.props[0].state\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n        \r\n        //set state labels and data for graph\r\n        this.state={\r\n            chartData:{\r\n                labels: dateLabels,\r\n                datasets: [\r\n                    {\r\n                        label: 'New Positive Cases',\r\n                        data: positiveIncreaseData,\r\n                        backgroundColor: \"rgba(255, 15, 15, 0.4)\"\r\n                    }\r\n                ]\r\n                \r\n            },\r\n            stateAbbr: state //use if needed\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Override method to update the chart when new props are passed into component.\r\n     * Gets the new data and sets the state with the data, will re-rendering to the component.\r\n     * @param prevProps previous props from prev chart\r\n     */\r\n    componentDidUpdate(prevProps: Case[]){\r\n        //check if user changed to look at a different state's data.\r\n        if (this.props[0].state !== prevProps[0].state){\r\n            //make the label array with dates. Have to use for loop since this.props.map and forEach are undefined.\r\n            let dateLabels: string[] = [];\r\n            let positiveIncreaseData: number[] = [];\r\n            let state: string = \"\"; //the state abbreviation. IE: 'il'\r\n            try{\r\n                for (let i=13; i>=0; i--){\r\n                    dateLabels.push(formatDate(this.props[i].date));\r\n                    positiveIncreaseData.push(this.props[i].positiveIncrease);\r\n                }\r\n                //get the state abbreviation\r\n                state = this.props[0].state\r\n            }catch(e){\r\n                console.log(e);\r\n            }\r\n\r\n            //set new labels and data for graph\r\n            let newData: {} ={\r\n                chartData:{\r\n                    labels: dateLabels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'New Positive Cases',\r\n                            data: positiveIncreaseData,\r\n                            backgroundColor: \"rgba(255, 15, 15, 0.4)\"\r\n                        }\r\n                    ]\r\n                    \r\n                },\r\n                stateAbbr: state //use if needed\r\n            }\r\n\r\n            this.setState(newData)\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        responsive: true\r\n                    }}\r\n                    height={500}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Chart;","import {Line} from \"react-chartjs-2\";\r\nimport {useState, useMemo} from \"react\";\r\nimport {Percent} from \"../interfaces/percent\";\r\nimport formatDate from \"../utilities/DateFormatter\";\r\n\r\n/**\r\n * Takes a Percent[] and displays it in a Line Chart.\r\n * \r\n * Practices using React Functional Components and making sure not too many re renders occur.\r\n * \r\n * @param percents Percents array of type Percent[].\r\n */\r\nconst PercentChart: React.FC<{percents: Percent[]}> = ({children, percents}) => {\r\n\r\n    //get labels and data.\r\n    let dateLabels: string[] = [];\r\n    let percentData: number[] = [];\r\n    let state: string = \"\"; //state abbreviation.\r\n    let color: string = \"rgba(15, 150, 255, 0.4)\"; //color of chart.\r\n\r\n    try {\r\n        percents.forEach(\r\n            (p: Percent) => {\r\n                dateLabels.push(formatDate(p.date));\r\n                percentData.push(p.percent);\r\n                state = p.state;\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.log(\"ERROR in PercentChart.tsx: \"+error);\r\n    }\r\n\r\n\r\n    //set default chartData for chart\r\n    const [chartData, setChartData] = useState({\r\n        labels: [\"month-day-year\", \"month-day-year\", \"month-day-year\"],\r\n        datasets: [\r\n            {\r\n                label: 'Past Percentages of Active Cases',\r\n                data: percentData,\r\n                backgroundColor: color,\r\n            }\r\n        ]\r\n    });\r\n\r\n\r\n    //only reget data for chart if state is changed. Prevents too many re-renders from occuring.\r\n    useMemo(() => {\r\n        //make chart with date labels and percentages ONLY if state is selected.\r\n        if (state !== \"\"){\r\n            try {\r\n                setChartData({\r\n                    labels: dateLabels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'Past Percentages of Active Cases',\r\n                            data: percentData,\r\n                            backgroundColor: color,\r\n                        }\r\n                    ]\r\n                });\r\n            } catch (error) {\r\n                console.log(\"ERROR in PercentChart.tsx: \"+error);\r\n            }\r\n        }\r\n        \r\n    }, [state, color]);\r\n    \r\n\r\n\r\n\r\n    return(\r\n        <div className=\"chart\">\r\n            <Line\r\n                data={chartData}\r\n                options={{\r\n                    maintainAspectRatio: false,\r\n                    responsive: true\r\n                }}\r\n                height={500}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PercentChart;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n/**\r\n * Creates an empty chart to display before user selects a state.\r\n */\r\n\r\nclass EmptyChart extends React.Component<{}, {chartData:{}, stateAbbr:string}>{\r\n\r\n    constructor(){\r\n        super({});\r\n\r\n        //make empty dateLabels and positiveIncreaseData\r\n        let dateLabels: string[] = [];\r\n        let positiveIncreaseData: number[] = [];\r\n        let state: string = \"\";\r\n        for (let i=13; i>=0; i--){\r\n            dateLabels.push(\"Select State\");\r\n            positiveIncreaseData.push(i);\r\n        }\r\n\r\n        //set state labels and data for graph\r\n        this.state={\r\n            chartData:{\r\n                labels: [\"month-day-year\", \"month-day-year\", \"month-day-year\"],\r\n                datasets: [\r\n                    {\r\n                        label: 'New Positive Cases',\r\n                        data: 0,\r\n                        backgroundColor: \"rgba(255, 15, 15, 0.4)\"\r\n                    }\r\n                ]\r\n                \r\n            },\r\n            stateAbbr: state //use if needed\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        responsive: true\r\n                    }}\r\n                    height={500}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default EmptyChart;","/**\r\n * Formats a number to include commas.\r\n * \r\n * @param num Number to format. Supports numbers from 0-999,999,999\r\n * \r\n * @returns number in string form with commas. IE: 1000 => 1,000\r\n * \r\n */\r\n\r\nconst formatNumber = (num: number) => {\r\n    let formattedNum: string = \"\";\r\n    let numStr: string = num.toString();\r\n\r\n\r\n    // 1,000 - 999,999 formatter.\r\n    if (numStr.length > 3 && numStr.length < 7){\r\n        formattedNum = numStr.substring(0, numStr.length-3).concat(\",\").concat(numStr.substring(numStr.length-3, numStr.length));\r\n        return formattedNum;\r\n    }\r\n    // 1,000,000 - 999,999,999\r\n    else if (numStr.length >= 7 && numStr.length < 10){\r\n        formattedNum = numStr.substring(0, numStr.length-6).concat(\",\").concat(numStr.substring(numStr.length-6, numStr.length-3))\r\n        .concat(\",\").concat(numStr.substring(numStr.length-3, numStr.length));\r\n        return formattedNum;\r\n    }\r\n    else {\r\n        return numStr;\r\n    }\r\n\r\n    \r\n    \r\n\r\n    \r\n\r\n    \r\n}\r\n\r\nexport default formatNumber;","/**\r\n * Takes a Date type and formats the date in a YYYYMMDD format as a number.\r\n * @param date the date to format in the YYYYMMDD format as a number.\r\n * @returns newDate number as YYYYMMDD.\r\n */\r\nconst makeDate = (date: Date) => {\r\n\r\n    //get the year month and day of date\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1; //starts at 0, so plus 1 gets correct calendar date.\r\n    let day = date.getDate();\r\n\r\n\r\n    //convert year month day into string to get proper date then back to a number.\r\n    //also adds 0 infront of month\r\n    let newDate:number = +(\"\"+year+\"0\"+month+\"\"+day);\r\n\r\n    return newDate;\r\n\r\n}\r\n\r\nexport default makeDate;","import {Case} from \"../interfaces/case\";\r\n\r\n/**\r\n * Selects a list of cases from a passed in list of cases based on the number of cases the user wants and the passed in date of the very last case they want.\r\n * @param cases An array of cases that holds information of a case state, date, and positiveincrease.\r\n * @param date the last date you want the cases to span back to.\r\n * @param numOfPastDays The amount of days you want cases for.\r\n * @returns pastCases, a Case[] that holds case information for the number of specified cases.\r\n */\r\nconst selectCases = (cases: Case[], date: number, numOfPastDays: number) => {\r\n\r\n    //cases in the past.\r\n    let pastCases: Case[] = [];\r\n\r\n    //make an array with the pastCases.\r\n    let casesAdded:number = 0; //ensures that only the last specified amount of cases are obtained. Without this, \r\n                                //sometimes 15 cases could be obtained when the new case is added for the day when user only wanted 14.\r\n\r\n    try {\r\n        cases.forEach(\r\n            (c: Case) => {\r\n                if (c.date >= date && casesAdded < numOfPastDays){\r\n                    let singleCase: Case = {\r\n                        state: c.state,\r\n                        date: c.date,\r\n                        positiveIncrease: c.positiveIncrease\r\n                    };\r\n\r\n                    pastCases.push(singleCase);\r\n\r\n                    //increase casesAdded\r\n                    casesAdded++;\r\n                }\r\n            }\r\n        )\r\n    } catch (error) {\r\n        console.log(\"ERROR: \"+error+\" Custom Message: No cases to get previous cases from.\");\r\n    }\r\n    \r\n\r\n    return pastCases;\r\n}\r\n\r\nexport default selectCases;","import {Case} from \"../interfaces/case\"\r\n\r\n/**\r\n * Calculates the total amount of cases that are in an array of Cases of type Case[].\r\n * @param pastCases Cases you wish to get the total amount of cases for.\r\n * @returns total cases as a number.\r\n */\r\nconst calcTotalCases = (pastCases: Case[]) => {\r\n\r\n    let totalCases: number = 0;\r\n\r\n    try {\r\n        pastCases.forEach(\r\n            (c: Case) => {\r\n                totalCases = totalCases + c.positiveIncrease;\r\n            }\r\n        );\r\n    } catch (error) {\r\n        console.log(\"ERROR: \"+error+\" Custom Message: No cases to calc total cases for.\");\r\n    }\r\n    \r\n\r\n    return totalCases;\r\n}\r\n\r\nexport default calcTotalCases;","import {Percent} from \"../interfaces/percent\";\r\nimport {Case} from \"../interfaces/case\";\r\n\r\n/**\r\n * Calculates the past percentage of active cases in the specified state based on population of the past two weeks.\r\n * @param pastCases Cases of type Case[] you wish to find past percentages of.\r\n * @param population The population of the selected state. Used to calc percent.\r\n * @returns perentages.reverse(), an array of percentages of type Percent[].\r\n */\r\nconst calcPastPercentages = (pastCases: Case[], population: number) => {\r\n    let percentages: Percent[] = [];\r\n    let totalPositiveCases: number = 0;\r\n    //find most current 14 cases from current case and calc percent.\r\n    //do this till at current date.\r\n\r\n    try {\r\n\r\n        for (let i=0; i<14; i++){ //goes through first two weeks of cases from beginning. newest to oldest.\r\n            for (let j=i; j<14+i; j++){ //starts at current case in the foreach loop\r\n                totalPositiveCases = totalPositiveCases + pastCases[j].positiveIncrease;\r\n            }\r\n\r\n            percentages.push({\r\n                state: pastCases[i].state,\r\n                date: pastCases[i].date,\r\n                percent: Number(((totalPositiveCases / population)*100).toFixed(2)),\r\n            });\r\n\r\n            totalPositiveCases = 0;\r\n        }\r\n    } catch (error) {\r\n        //do nothing. will give error when user has not selected a state yet. This is natural.\r\n    }\r\n    \r\n        \r\n\r\n\r\n    return percentages.reverse();\r\n}\r\n\r\nexport default calcPastPercentages;","import React, {useEffect, useState, useMemo} from 'react';\r\nimport { stateContext } from '../contexts/stateContext';\r\nimport {Case} from \"../interfaces/case\";\r\nimport {Percent} from \"../interfaces/percent\";\r\nimport Chart from './Chart';\r\nimport PercentChart from './PercentChart';\r\nimport EmptyChart from './EmptyChart';\r\nimport formatDate from \"../utilities/DateFormatter\";\r\nimport formatNumber from \"../utilities/NumberFormatter\";\r\nimport makeDate from \"../utilities/MakeDate\";\r\nimport selectCases from \"../utilities/SelectCases\";\r\nimport calcTotalCases from \"../utilities/CalcTotalCases\";\r\nimport calcPastPercentages from '../utilities/CalcPastPercentages';\r\n\r\n\r\n/**\r\n * Gets the cases from the provided state from user, displays the table, and calculates the total positive active cases and percentage of positive active cases in the state, based on \r\n * state population.\r\n * \r\n * Uses hooks to practice hooks\r\n */\r\n\r\nconst Cases: React.FC = () => {\r\n\r\n    //get context\r\n    const {state, abbr} = React.useContext(stateContext);\r\n\r\n    //illinois 2019 population.\r\n    //populations hash to store populations for each state\r\n    const populationsHash: Record<string, number> = {\r\n        \"California\": 39512223,\r\n        \"Texas\": 28995881,\r\n        \"Florida\": 21477737,\r\n        \"New York\": 19453561,\r\n        \"Illinois\": 12671821,\r\n        \"Pennsylvania\": 12801989,\r\n        \"Ohio\": 11689100,\r\n        \"Georgia\": 10617423,\r\n        \"North Carolina\": 10488084,\r\n        \"Michigan\": 9986857,\r\n        \"New Jersey\": 8882190,\r\n        \"Virginia\": 8535519,\r\n        \"Washington\": 7614893,\r\n        \"Arizona\": 7278717,\r\n        \"Massachusetts\": 6949503,\r\n        \"Tennessee\": 6833174,\r\n        \"Indiana\": 6732219,\r\n        \"Missouri\": 6137428,\r\n        \"Maryland\": 6045680,\r\n        \"Wisconsin\": 5822434,\r\n        \"Colorado\": 5758736,\r\n        \"Minnesota\": 5639632,\r\n        \"South Carolina\": 5148714,\r\n        \"Alabama\": 4903185,\r\n        \"Louisiana\": 4648794,\r\n        \"Kentucky\": 4467673,\r\n        \"Oregon\": 4217737,\r\n        \"Oklahoma\": 3956971,\r\n        \"Connecticut\": 3565287,\r\n        \"Utah\": 3205958,\r\n        \"Iowa\": 3155070,\r\n        \"Nevada\": 3080156,\r\n        \"Arkansas\": 3017825,\r\n        \"Mississippi\": 2976149,\r\n        \"Kansas\": 2913314,\r\n        \"New Mexico\": 2096829,\r\n        \"Nebraska\": 1934408,\r\n        \"West Virginia\": 1792147,\r\n        \"Idaho\": 1787065,\r\n        \"Hawaii\": 1415872,\r\n        \"New Hampshire\": 1359711,\r\n        \"Maine\": 1344212,\r\n        \"Montana\": 1068778,\r\n        \"Rhode Island\": 1059361,\r\n        \"Delaware\": 973764,\r\n        \"South Dakota\": 884659,\r\n        \"North Dakota\": 762062,\r\n        \"Alaska\": 731545,\r\n        \"District of Columbia\": 705749,\r\n        \"Vermont\": 623989,\r\n        \"Wyoming\": 578759,\r\n        \"\": 0, //if no state selected\r\n    }\r\n\r\n    let population: number = populationsHash[state]; //get the population of the state\r\n\r\n    //make cases a state variable\r\n    const [cases, setCases] = useState([])\r\n\r\n    //get the cases with async\r\n    useEffect(() => {\r\n        const getCases = async () => {\r\n            if (abbr.length===2){ //check to make sure a proper state is selected.\r\n                const url: string = \"https://api.covidtracking.com/v1/states/\".concat(abbr.toLowerCase()).concat(\"/daily.json\");\r\n\r\n                const response = await fetch(url);\r\n\r\n                const data = await response.json();\r\n\r\n                setCases(data);\r\n            }\r\n        };\r\n\r\n        getCases();\r\n\r\n        \r\n    }, [abbr]); //will re get data once abbr is changed. IE: user selects a different state.\r\n\r\n\r\n    const [currentDate, setCurrentDate] = useState(\"MM-DD-YYYY\"); //used to display current date to user.\r\n\r\n    const [pastPercentages, setPastPercentages] = useState<Percent[]>([{\r\n        state: \"\",\r\n        date: 0,\r\n        percent: 0,\r\n    }]);\r\n\r\n    const [pastTwoWeeksCases, setPastTwoWeeksCases] = useState<Case[]>([{\r\n        state: \"\",\r\n        date: 0,\r\n        positiveIncrease: 0,\r\n    }]);\r\n\r\n    const [totalActiveCases, setTotalActiveCases] = useState(0);\r\n\r\n    //Uses memo to only get cases when state is changed by user. This avoids getting this data with every render.\r\n    useMemo(() => {\r\n\r\n        //get date from two weeks ago from the last case two weeks ago, including that last case and the past cases in the past four weeks\r\n        let fourWeeksAgo: Date = new Date((Date.now() - 12096e5) - 11232e5); //will be used to calc past two weeks active cases percentage.\r\n\r\n        let fourWeeksAgoDate: number = makeDate(fourWeeksAgo); //put date in correct order and format as a number.\r\n\r\n        let pastFourWeeksCases: Case[] = selectCases(cases, fourWeeksAgoDate, 28); //get the cases in the past four weeks.\r\n\r\n        let pastPercentagesOfActiveCases: Percent[] = calcPastPercentages(pastFourWeeksCases, population); //get the past active cases percentage based of state population spanning back two weeks.\r\n                                                                                                           //this list of percents are ordered oldest to newest.\r\n\r\n        if (pastFourWeeksCases.length > 0){ //only get the current date when the array is filled. Avoids invalid index error.\r\n            setCurrentDate(formatDate(pastFourWeeksCases[0].date)); //get most recent date of data.\r\n        }\r\n        \r\n\r\n        \r\n        //get date from two weeks ago, the past cases, and total active cases in the past two weeks.\r\n        let twoWeeksAgo: Date = new Date(Date.now() - 12096e5);\r\n\r\n        let twoWeeksAgoDate: number = makeDate(twoWeeksAgo); //put date in correct order and format as a number.\r\n        \r\n        let pastTwoWeeksCases: Case[] = selectCases(pastFourWeeksCases, twoWeeksAgoDate, 14);   //get the cases in the past two weeks\r\n                                                                                                //will most likely use outside of this file.\r\n\r\n        let totalActiveCases:number = calcTotalCases(pastTwoWeeksCases);    //get total active cases from past two weeks. \r\n                                                                            //used to monitor active cases.\r\n\r\n        setPastPercentages(pastPercentagesOfActiveCases);\r\n        setPastTwoWeeksCases(pastTwoWeeksCases);\r\n        setTotalActiveCases(totalActiveCases);\r\n    }, [cases, population]);\r\n    \r\n\r\n\r\n    return(\r\n        <div>\r\n            <div>\r\n                {pastTwoWeeksCases.length === 0 ? (\r\n                    <div>\r\n                        <h3>Select a state to see the data.</h3>\r\n                        <EmptyChart />\r\n                        <br />\r\n                        <PercentChart percents = {[]}/>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <Chart {...pastTwoWeeksCases}/>\r\n                        <br />\r\n                        <PercentChart percents = {pastPercentages}/>\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <br /><br />\r\n            <div>\r\n                \r\n                \r\n                {population === 0 ? (\r\n                    <div>\r\n                        <h4>Select a state to see:</h4>\r\n                        <div className=\"content-section\">\r\n                            <h5>Total recorded active cases in the state.</h5>\r\n                        </div>\r\n                        <div className=\"content-section\">\r\n                            <h5>Percentage of recorded active cases in the state based on the state's 2019 population.</h5>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <div className=\"content-section\">\r\n                            <h5>Total recorded active cases as of {currentDate} in {state}: {formatNumber(totalActiveCases)}</h5>\r\n                        </div>\r\n                        <div className=\"content-section\">\r\n                            <h5>Percentage of recorded active cases as of {currentDate} in {state} based on {state}'s 2019 population of {formatNumber(population)} people: {((totalActiveCases / population)*100).toFixed(2)+\"%\"}</h5>  \r\n                        </div>\r\n                    </div>\r\n                )}\r\n                \r\n                <br />\r\n                <div className=\"table-responsive\">\r\n                    <h2>Past reported live positive cases spanning back two weeks:</h2>\r\n                    <table className=\"table table-striped table-sm table-bordered\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th>State</th>\r\n                                <th>Date</th>\r\n                                <th>New Positive Cases Recorded</th>\r\n                                <th>Percentage of Active Cases</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {pastTwoWeeksCases.map(\r\n                                (c: Case) => {\r\n                                    return (\r\n                                        <tr key={c.date}>\r\n                                            <td>{c.state}</td>\r\n                                            <td>{formatDate(c.date)}</td>\r\n                                            <td>{formatNumber(c.positiveIncrease)}</td>\r\n                                            <td>{pastPercentages.find(({date}) => date === c.date)?.percent}</td>\r\n                                        </tr>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cases;\r\n\r\n\r\n \r\n","import React from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport {State} from \"../interfaces/state\";\r\nimport {stateContext} from '../contexts/stateContext'\r\n\r\n\r\n\r\nconst Dropdown: React.FC = () => {\r\n\r\n    const {state, abbr, setState} = useContext(stateContext);\r\n\r\n    //all the states.\r\n    const [states] = useState([\r\n        {state: \"Alabama\", abbr: \"AL\"},\r\n        {state: \"Alaska\", abbr: \"AK\"},\r\n        {state: \"Arizona\", abbr: \"AZ\"},\r\n        {state: \"Arkansas\", abbr: \"AR\"},\r\n        {state: \"California\", abbr: \"CA\"},\r\n        {state: \"Colorado\", abbr: \"CO\"},\r\n        {state: \"Connecticut\", abbr: \"CT\"},\r\n        {state: \"Delaware\", abbr: \"DE\"},\r\n        {state: \"District of Columbia\", abbr: \"DC\"},\r\n        {state: \"Florida\", abbr: \"FL\"},\r\n        {state: \"Georgia\", abbr: \"GA\"},\r\n        {state: \"Hawaii\", abbr: \"HI\"},\r\n        {state: \"Idaho\", abbr: \"ID\"},\r\n        {state: \"Illinois\", abbr: \"IL\"},\r\n        {state: \"Indiana\", abbr: \"IN\"},\r\n        {state: \"Iowa\", abbr: \"IA\"},\r\n        {state: \"Kansas\", abbr: \"KS\"},\r\n        {state: \"Kentucky\", abbr: \"KY\"},\r\n        {state: \"Louisiana\", abbr: \"LA\"},\r\n        {state: \"Maine\", abbr: \"ME\"},\r\n        {state: \"Maryland\", abbr: \"MD\"},\r\n        {state: \"Massachusetts\", abbr: \"MA\"},\r\n        {state: \"Michigan\", abbr: \"MI\"},\r\n        {state: \"Minnesota\", abbr: \"MN\"},\r\n        {state: \"Mississippi\", abbr: \"MS\"},\r\n        {state: \"Missouri\", abbr: \"MO\"},\r\n        {state: \"Montana\", abbr: \"MT\"},\r\n        {state: \"Nebraska\", abbr: \"NE\"},\r\n        {state: \"Nevada\", abbr: \"NV\"},\r\n        {state: \"New Hampshire\", abbr: \"NH\"},\r\n        {state: \"New Jersey\", abbr: \"NJ\"},\r\n        {state: \"New Mexico\", abbr: \"NM\"},\r\n        {state: \"New York\", abbr: \"NY\"},\r\n        {state: \"North Carolina\", abbr: \"NC\"},\r\n        {state: \"North Dakota\", abbr: \"ND\"},\r\n        {state: \"Ohio\", abbr: \"OH\"},\r\n        {state: \"Oklahoma\", abbr: \"OK\"},\r\n        {state: \"Oregon\", abbr: \"OR\"},\r\n        {state: \"Pennsylvania\", abbr: \"PA\"},\r\n        {state: \"Rhode Island\", abbr: \"RI\"},\r\n        {state: \"South Carolina\", abbr: \"SC\"},\r\n        {state: \"South Dakota\", abbr: \"SD\"},\r\n        {state: \"Tennessee\", abbr: \"TN\"},\r\n        {state: \"Texas\", abbr: \"TX\"},\r\n        {state: \"Utah\", abbr: \"UT\"},\r\n        {state: \"Vermont\", abbr: \"VT\"},\r\n        {state: \"Virginia\", abbr: \"VA\"},\r\n        {state: \"Washington\", abbr: \"WA\"},\r\n        {state: \"West Virginia\", abbr: \"WV\"},\r\n        {state: \"Wisconsin\", abbr: \"WI\"},\r\n        {state: \"Wyoming\", abbr: \"WY\"},\r\n    ])\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            {state === \"\" ? (\r\n                <h2>Select a state to see new Positive Case Increases per day from the last two weeks for that state.</h2>\r\n            ) : (\r\n                <h2>New Positive Case Increases per day from the last two weeks in {state}: </h2>\r\n            )}\r\n            \r\n            <p>All data is based off of 'The COVID Tracking Project' API. The numbers from the API also include propable cases as well and so does this application.</p>\r\n            <p>Population data is from: https://www.infoplease.com/us/states/state-population-by-rank</p>\r\n            <select className=\"float-right btn btn-sm btn-outline-dark dropdown-toggle\"\r\n                    value={abbr}\r\n                    onChange={(e) => setState({\r\n                        state: e.target.options[e.target.selectedIndex].text,\r\n                        abbr: e.currentTarget.value,\r\n                        setState: (): void => {}\r\n                    })}\r\n            >\r\n                <option defaultValue=\"\"></option>\r\n                {states.map(\r\n                    (s: State) =>{\r\n                        return(\r\n                            <option key={s.state} value={s.abbr}>{s.state}</option>\r\n                        );\r\n                    }\r\n                )}\r\n                \r\n            </select> \r\n            <h4 className=\"float-right\">Select State: &nbsp;</h4>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Cases from './components/Cases';\nimport Dropdown from './components/Dropdown';\nimport StateProvider from './contexts/stateContext';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Nav/>\n      \n      <div className=\"container-fluid\">\n        <div className=\"row\">\n      \n          <main role=\"main\" className=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\n            \n            <StateProvider>\n              \n              <Dropdown />\n\n              \n              \n              <br /><br />\n              \n              <Cases />\n              \n            </StateProvider>\n      \n            \n\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}