{"version":3,"sources":["components/Nav.tsx","contexts/stateContext.tsx","utilities/DateFormatter.tsx","components/Chart.tsx","components/EmptyChart.tsx","utilities/NumberFormatter.tsx","components/Cases.tsx","components/Dropdown.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Nav","className","href","initContext","state","abbr","setState","Error","stateContext","React","createContext","StateProvider","children","useState","Provider","value","formatDate","date","dateStr","toString","year","substring","month","day","concat","Chart","props","dateLabels","positiveIncreaseData","i","push","positiveIncrease","e","console","log","chartData","labels","datasets","label","data","backgroundColor","stateAbbr","prevProps","this","newData","options","maintainAspectRatio","responsive","height","Component","EmptyChart","formatNumber","num","numStr","length","Cases","useContext","population","pastCases","totalActiveCases","twoWeeksAgo","Date","now","getFullYear","getMonth","getDate","cases","setCases","useEffect","a","url","toLowerCase","fetch","response","json","getCases","casesAdded","forEach","c","singleCase","toFixed","map","Dropdown","states","onChange","target","selectedIndex","text","currentTarget","defaultValue","s","App","role","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c34c5254.chunk.js","sourcesContent":["/**\r\n * top navigation bar\r\n */\r\n\r\nconst Nav = () => {\r\n    return (\r\n    <header className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow\">\r\n        <a className=\"navbar-brand me-0 px-3\" href=\"javascript:void(0)\">COVID-19 Active Cases</a>\r\n        <a className=\"portfolio me-0 px-3\" href=\"https://brandonwsa.github.io/\">My Portfolio</a>\r\n\r\n    </header>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React, { Dispatch, SetStateAction } from \"react\";\nimport { useState } from \"react\";\n\n/**\n * Allows access to state name and abbreviation from different components.\n * \n * State Context holds: \n *  state: string (name of state)\n *  abbr: string (state abbreviation)\n *  setState: Dispatch<SetStateAction<Context>> (setState method)\n */\n\ntype Context = {\n    state: string;\n    abbr: string;\n    setState: Dispatch<SetStateAction<Context>>;\n}\n\nconst initContext = {\n    state: \"\",\n    abbr: \"\",\n    setState: (state: SetStateAction<Context>): void => {\n        throw new Error('setState function must be overriden'); //incase someone forgets to override the function.\n    },\n};\n\n//create the context\nexport const stateContext = React.createContext(initContext)\n\n//create provider\nconst StateProvider: React.FC = ({children}) => {\n    const [state, setState] = useState<Context>(initContext)\n\n    return (\n        <stateContext.Provider value={{...state, setState}}>\n                {children}\n        </stateContext.Provider>\n    );\n}\n\nexport default StateProvider;","/**\r\n * Takes a date in number YYYYMMDD and converts it to a string form of MM-DD-YYYY.\r\n * \r\n * @param date :number. Date in number form, passed in from user. Must be in YearMonthDay format. IE: 20210125\r\n * \r\n * @returns date in MM-DD-YYYY form as string.\r\n * \r\n */\r\n\r\nconst formatDate = (date: number) => {\r\n    //get the year month day\r\n    let dateStr: string = date.toString();\r\n    let year: string = dateStr.substring(0, 4);\r\n    let month: string = dateStr.substring(4, 6);\r\n    let day: string = dateStr.substring(6, 8);\r\n\r\n    //format and return\r\n    return month.concat(\"-\").concat(day).concat(\"-\").concat(year);\r\n}\r\n\r\nexport default formatDate;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport {Case} from \"../interfaces/case\";\r\nimport formatDate from \"../utilities/DateFormatter\";\r\n\r\n/**\r\n * A chart that displays the states positive increase in numbers from the past two weeks\r\n * \r\n * Uses class component to practice components\r\n */\r\n\r\nclass Chart extends React.Component<Case[], {chartData:{}, stateAbbr:string}>{\r\n\r\n    constructor(props: Case[]){\r\n        super(props);\r\n\r\n        //make the label array with dates. Have to use for loop since this.props.map and forEach are undefined.\r\n        let dateLabels: string[] = [];\r\n        let positiveIncreaseData: number[] = [];\r\n        let state: string = \"\"; //the state abbreviation. IE: 'il'\r\n        try{\r\n            for (let i=13; i>=0; i--){\r\n                dateLabels.push(formatDate(this.props[i].date));\r\n                positiveIncreaseData.push(this.props[i].positiveIncrease);\r\n            }\r\n            //get the state abbreviation\r\n            state = this.props[0].state\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n        \r\n        //set state labels and data for graph\r\n        this.state={\r\n            chartData:{\r\n                labels: dateLabels,\r\n                datasets: [\r\n                    {\r\n                        label: 'New Positive Cases',\r\n                        data: positiveIncreaseData,\r\n                        backgroundColor: \"rgba(255, 15, 15, 0.4)\"\r\n                    }\r\n                ]\r\n                \r\n            },\r\n            stateAbbr: state //use if needed\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Override method to update the chart when new props are passed into component.\r\n     * Gets the new data and sets the state with the data, will re-rendering to the component.\r\n     * @param prevProps previous props from prev chart\r\n     */\r\n    componentDidUpdate(prevProps: Case[]){\r\n        //check if user changed to look at a different state's data.\r\n        if (this.props[0].state !== prevProps[0].state){\r\n            //make the label array with dates. Have to use for loop since this.props.map and forEach are undefined.\r\n            let dateLabels: string[] = [];\r\n            let positiveIncreaseData: number[] = [];\r\n            let state: string = \"\"; //the state abbreviation. IE: 'il'\r\n            try{\r\n                for (let i=13; i>=0; i--){\r\n                    dateLabels.push(formatDate(this.props[i].date));\r\n                    positiveIncreaseData.push(this.props[i].positiveIncrease);\r\n                }\r\n                //get the state abbreviation\r\n                state = this.props[0].state\r\n            }catch(e){\r\n                console.log(e);\r\n            }\r\n\r\n            //set new labels and data for graph\r\n            let newData: {} ={\r\n                chartData:{\r\n                    labels: dateLabels,\r\n                    datasets: [\r\n                        {\r\n                            label: 'New Positive Cases',\r\n                            data: positiveIncreaseData,\r\n                            backgroundColor: \"rgba(255, 15, 15, 0.4)\"\r\n                        }\r\n                    ]\r\n                    \r\n                },\r\n                stateAbbr: state //use if needed\r\n            }\r\n\r\n            this.setState(newData)\r\n        }\r\n        \r\n        \r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        responsive: true\r\n                    }}\r\n                    height={500}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\n/**\r\n * Creates an empty chart to display before user selects a state.\r\n */\r\n\r\nclass EmptyChart extends React.Component<{}, {chartData:{}, stateAbbr:string}>{\r\n\r\n    constructor(){\r\n        super({});\r\n\r\n        //make empty dateLabels and positiveIncreaseData\r\n        let dateLabels: string[] = [];\r\n        let positiveIncreaseData: number[] = [];\r\n        let state: string = \"\";\r\n        for (let i=13; i>=0; i--){\r\n            dateLabels.push(\"Select State\");\r\n            positiveIncreaseData.push(i);\r\n        }\r\n\r\n        //set state labels and data for graph\r\n        this.state={\r\n            chartData:{\r\n                labels: [\"month-day-year\", \"month-day-year\", \"month-day-year\"],\r\n                datasets: [\r\n                    {\r\n                        label: 'New Positive Cases',\r\n                        data: 0,\r\n                        backgroundColor: \"rgba(255, 15, 15, 0.4)\"\r\n                    }\r\n                ]\r\n                \r\n            },\r\n            stateAbbr: state //use if needed\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"chart\">\r\n                <Line\r\n                    data={this.state.chartData}\r\n                    options={{\r\n                        maintainAspectRatio: false,\r\n                        responsive: true\r\n                    }}\r\n                    height={500}\r\n                />\r\n\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nexport default EmptyChart;","/**\r\n * Formats a number to include commas.\r\n * \r\n * @param num Number to format. Supports numbers from 0-999,999,999\r\n * \r\n * @returns number in string form with commas. IE: 1000 => 1,000\r\n * \r\n */\r\n\r\nconst formatNumber = (num: number) => {\r\n    let formattedNum: string = \"\";\r\n    let numStr: string = num.toString();\r\n\r\n\r\n    // 1,000 - 999,999 formatter.\r\n    if (numStr.length > 3 && numStr.length < 7){\r\n        formattedNum = numStr.substring(0, numStr.length-3).concat(\",\").concat(numStr.substring(numStr.length-3, numStr.length));\r\n        return formattedNum;\r\n    }\r\n    // 1,000,000 - 999,999,999\r\n    else if (numStr.length >= 7 && numStr.length < 10){\r\n        formattedNum = numStr.substring(0, numStr.length-6).concat(\",\").concat(numStr.substring(numStr.length-6, numStr.length-3))\r\n        .concat(\",\").concat(numStr.substring(numStr.length-3, numStr.length));\r\n        return formattedNum;\r\n    }\r\n    else {\r\n        return numStr;\r\n    }\r\n\r\n    \r\n    \r\n\r\n    \r\n\r\n    \r\n}\r\n\r\nexport default formatNumber;","import React, {useEffect, useState } from 'react';\r\nimport { stateContext } from '../contexts/stateContext';\r\nimport {Case} from \"../interfaces/case\";\r\nimport Chart from './Chart';\r\nimport EmptyChart from './EmptyChart';\r\nimport formatDate from \"../utilities/DateFormatter\";\r\nimport formatNumber from \"../utilities/NumberFormatter\";\r\n\r\n\r\n/**\r\n * Gets the cases from the provided state from user, displays the table, and calculates the total positive active cases and percentage of positive active cases in the state, based on \r\n * state population.\r\n * \r\n * Uses hooks to practice hooks\r\n */\r\n\r\nconst Cases: React.FC = () => {\r\n\r\n    //get context\r\n    const {state, abbr} = React.useContext(stateContext);\r\n\r\n    //illinois 2019 population.\r\n    //populations hash to store populations for each state\r\n    const populationsHash: Record<string, number> = {\r\n        \"California\": 39512223,\r\n        \"Texas\": 28995881,\r\n        \"Florida\": 21477737,\r\n        \"New York\": 19453561,\r\n        \"Illinois\": 12671821,\r\n        \"Pennsylvania\": 12801989,\r\n        \"Ohio\": 11689100,\r\n        \"Georgia\": 10617423,\r\n        \"North Carolina\": 10488084,\r\n        \"Michigan\": 9986857,\r\n        \"New Jersey\": 8882190,\r\n        \"Virginia\": 8535519,\r\n        \"Washington\": 7614893,\r\n        \"Arizona\": 7278717,\r\n        \"Massachusetts\": 6949503,\r\n        \"Tennessee\": 6833174,\r\n        \"Indiana\": 6732219,\r\n        \"Missouri\": 6137428,\r\n        \"Maryland\": 6045680,\r\n        \"Wisconsin\": 5822434,\r\n        \"Colorado\": 5758736,\r\n        \"Minnesota\": 5639632,\r\n        \"South Carolina\": 5148714,\r\n        \"Alabama\": 4903185,\r\n        \"Louisiana\": 4648794,\r\n        \"Kentucky\": 4467673,\r\n        \"Oregon\": 4217737,\r\n        \"Oklahoma\": 3956971,\r\n        \"Connecticut\": 3565287,\r\n        \"Utah\": 3205958,\r\n        \"Iowa\": 3155070,\r\n        \"Nevada\": 3080156,\r\n        \"Arkansas\": 3017825,\r\n        \"Mississippi\": 2976149,\r\n        \"Kansas\": 2913314,\r\n        \"New Mexico\": 2096829,\r\n        \"Nebraska\": 1934408,\r\n        \"West Virginia\": 1792147,\r\n        \"Idaho\": 1787065,\r\n        \"Hawaii\": 1415872,\r\n        \"New Hampshire\": 1359711,\r\n        \"Maine\": 1344212,\r\n        \"Montana\": 1068778,\r\n        \"Rhode Island\": 1059361,\r\n        \"Delaware\": 973764,\r\n        \"South Dakota\": 884659,\r\n        \"North Dakota\": 762062,\r\n        \"Alaska\": 731545,\r\n        \"District of Columbia\": 705749,\r\n        \"Vermont\": 623989,\r\n        \"Wyoming\": 578759,\r\n        \"\": 0, //if no state selected\r\n    }\r\n\r\n    //get the population of the state\r\n    let population: number = populationsHash[state];\r\n\r\n    //cases in the past two weeks\r\n    //will most likely use outside of this file.\r\n    let pastCases: Case[] = [];\r\n\r\n    //used to monitor active cases\r\n    let totalActiveCases:number = 0;\r\n\r\n    //get date from two weeks ago\r\n    let twoWeeksAgo = new Date(Date.now() - 12096e5);\r\n\r\n    //get the year month and day of date\r\n    let year = twoWeeksAgo.getFullYear();\r\n    let month = twoWeeksAgo.getMonth() + 1;\r\n    let day = twoWeeksAgo.getDate();\r\n\r\n\r\n    //convert year month day into string to get proper date then back to a number.\r\n    //also adds 0 infront of month\r\n    let date:number = +(\"\"+year+\"0\"+month+\"\"+day);\r\n    \r\n\r\n    //make cases a state variable\r\n    const [cases, setCases] = useState([])\r\n\r\n    //get the cases with async\r\n    useEffect(() => {\r\n        const getCases = async () => {\r\n            if (abbr.length===2){\r\n                const url: string = \"https://api.covidtracking.com/v1/states/\".concat(abbr.toLowerCase()).concat(\"/daily.json\");\r\n\r\n                const response = await fetch(url);\r\n\r\n                const data = await response.json();\r\n\r\n                setCases(data);\r\n            }\r\n        };\r\n\r\n        getCases();\r\n\r\n        \r\n    }, [abbr]); //will re get data once abbr is changed.\r\n\r\n    \r\n\r\n    \r\n\r\n    //make an array with the pastCases from two weeks.\r\n    let casesAdded:number = 0; //ensures that only the last 14 cases are obtained. Without this, sometimes 15 could be obtained when the new case is added for the day.\r\n    cases.forEach(\r\n        (c: Case) => {\r\n            if (c.date >= date && casesAdded < 14){\r\n                let singleCase = {\r\n                    state: c.state,\r\n                    date: c.date,\r\n                    positiveIncrease: c.positiveIncrease\r\n                };\r\n\r\n                pastCases.push(singleCase);\r\n\r\n                //add case positiveIncrease to totalActiceCases.\r\n                totalActiveCases = totalActiveCases + c.positiveIncrease;\r\n\r\n                //increase casesAdded\r\n                casesAdded++;\r\n\r\n\r\n            }\r\n        }\r\n    )\r\n    \r\n\r\n    return(\r\n        <div>\r\n            <div>\r\n                {pastCases.length === 0 ? (\r\n                    <div>\r\n                        <h3>Select a state to see the data.</h3>\r\n                        <EmptyChart />\r\n                    </div>\r\n                ) : (\r\n                    <Chart {...pastCases}/>\r\n                )}\r\n            </div>\r\n            <br /><br />\r\n            <div>\r\n                \r\n                \r\n                {population === 0 ? (\r\n                    <div>\r\n                        <h4>Select a state to see:</h4>\r\n                        <h5>\r\n                            <ul>\r\n                                <li>Total recorded active cases in the state.</li>\r\n                                <li>Percentage of recorded active cases in the state based on the state's 2019 population.</li>\r\n                            </ul>\r\n                        </h5>\r\n                    </div>\r\n                ) : (\r\n                    <div>\r\n                        <p>These numbers include propable cases.</p>\r\n                        <h5>Total recorded active cases in {state}: {formatNumber(totalActiveCases)}</h5>\r\n                        <h5>Percentage of recorded active cases in {state} based on {state}'s 2019 population of {formatNumber(population)} people: {((totalActiveCases / population)*100).toFixed(2)+\"%\"}</h5>  \r\n                    </div>\r\n                )}\r\n                <p>Population data is from: https://www.infoplease.com/us/states/state-population-by-rank</p>\r\n                <br />\r\n                <div className=\"table-responsive\">\r\n                    <h2>Past reported live positive cases spanning back two weeks:</h2>\r\n                    <table className=\"table table-striped table-sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>State</th>\r\n                                <th>Date</th>\r\n                                <th>New Positive Cases Recorded</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {pastCases.map(\r\n                                (c: Case) => {\r\n                                    return (\r\n                                        <tr key={c.date}>\r\n                                            <td>{c.state}</td>\r\n                                            <td>{formatDate(c.date)}</td>\r\n                                            <td>{formatNumber(c.positiveIncrease)}</td>\r\n                                        </tr>\r\n                                    );\r\n                                }\r\n                            )}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cases;\r\n\r\n\r\n \r\n","import React from 'react';\r\nimport { useState, useContext } from 'react';\r\nimport {State} from \"../interfaces/state\";\r\nimport {stateContext} from '../contexts/stateContext'\r\n\r\n\r\n\r\nconst Dropdown: React.FC = () => {\r\n\r\n    const {state, abbr, setState} = useContext(stateContext);\r\n\r\n    //all the states.\r\n    const [states] = useState([\r\n        {state: \"Alabama\", abbr: \"AL\"},\r\n        {state: \"Alaska\", abbr: \"AK\"},\r\n        {state: \"Arizona\", abbr: \"AZ\"},\r\n        {state: \"Arkansas\", abbr: \"AR\"},\r\n        {state: \"California\", abbr: \"CA\"},\r\n        {state: \"Colorado\", abbr: \"CO\"},\r\n        {state: \"Connecticut\", abbr: \"CT\"},\r\n        {state: \"Delaware\", abbr: \"DE\"},\r\n        {state: \"District of Columbia\", abbr: \"DC\"},\r\n        {state: \"Florida\", abbr: \"FL\"},\r\n        {state: \"Georgia\", abbr: \"GA\"},\r\n        {state: \"Hawaii\", abbr: \"HI\"},\r\n        {state: \"Idaho\", abbr: \"ID\"},\r\n        {state: \"Illinois\", abbr: \"IL\"},\r\n        {state: \"Indiana\", abbr: \"IN\"},\r\n        {state: \"Iowa\", abbr: \"IA\"},\r\n        {state: \"Kansas\", abbr: \"KS\"},\r\n        {state: \"Kentucky\", abbr: \"KY\"},\r\n        {state: \"Louisiana\", abbr: \"LA\"},\r\n        {state: \"Maine\", abbr: \"ME\"},\r\n        {state: \"Maryland\", abbr: \"MD\"},\r\n        {state: \"Massachusetts\", abbr: \"MA\"},\r\n        {state: \"Michigan\", abbr: \"MI\"},\r\n        {state: \"Minnesota\", abbr: \"MN\"},\r\n        {state: \"Mississippi\", abbr: \"MS\"},\r\n        {state: \"Missouri\", abbr: \"MO\"},\r\n        {state: \"Montana\", abbr: \"MT\"},\r\n        {state: \"Nebraska\", abbr: \"NE\"},\r\n        {state: \"Nevada\", abbr: \"NV\"},\r\n        {state: \"New Hampshire\", abbr: \"NH\"},\r\n        {state: \"New Jersey\", abbr: \"NJ\"},\r\n        {state: \"New Mexico\", abbr: \"NM\"},\r\n        {state: \"New York\", abbr: \"NY\"},\r\n        {state: \"North Carolina\", abbr: \"NC\"},\r\n        {state: \"North Dakota\", abbr: \"ND\"},\r\n        {state: \"Ohio\", abbr: \"OH\"},\r\n        {state: \"Oklahoma\", abbr: \"OK\"},\r\n        {state: \"Oregon\", abbr: \"OR\"},\r\n        {state: \"Pennsylvania\", abbr: \"PA\"},\r\n        {state: \"Rhode Island\", abbr: \"RI\"},\r\n        {state: \"South Carolina\", abbr: \"SC\"},\r\n        {state: \"South Dakota\", abbr: \"SD\"},\r\n        {state: \"Tennessee\", abbr: \"TN\"},\r\n        {state: \"Texas\", abbr: \"TX\"},\r\n        {state: \"Utah\", abbr: \"UT\"},\r\n        {state: \"Vermont\", abbr: \"VT\"},\r\n        {state: \"Virginia\", abbr: \"VA\"},\r\n        {state: \"Washington\", abbr: \"WA\"},\r\n        {state: \"West Virginia\", abbr: \"WV\"},\r\n        {state: \"Wisconsin\", abbr: \"WI\"},\r\n        {state: \"Wyoming\", abbr: \"WY\"},\r\n    ])\r\n\r\n\r\n\r\n    return(\r\n        <div>\r\n            {state === \"\" ? (\r\n                <h2>Select a state to see new Positive Case Increases per day from the last two weeks for that state.</h2>\r\n            ) : (\r\n                <h2>New Positive Case Increases per day from the last two weeks in {state}: </h2>\r\n            )}\r\n            \r\n            <p>All data is based off of 'The COVID Tracking Project' API. The numbers from the API also include propable cases as well.</p>\r\n            <select className=\"float-right btn btn-sm btn-outline-secondary dropdown-toggle\"\r\n                    value={abbr}\r\n                    onChange={(e) => setState({\r\n                        state: e.target.options[e.target.selectedIndex].text,\r\n                        abbr: e.currentTarget.value,\r\n                        setState: (): void => {}\r\n                    })}\r\n            >\r\n                <option defaultValue=\"\"></option>\r\n                {states.map(\r\n                    (s: State) =>{\r\n                        return(\r\n                            <option key={s.state} value={s.abbr}>{s.state}</option>\r\n                        );\r\n                    }\r\n                )}\r\n                \r\n            </select> \r\n            <h4 className=\"float-right\">Select State: &nbsp;</h4>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dropdown;","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav';\nimport Cases from './components/Cases';\nimport Dropdown from './components/Dropdown';\nimport StateProvider from './contexts/stateContext';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Nav/>\n      \n      <div className=\"container-fluid\">\n        <div className=\"row\">\n      \n          <main role=\"main\" className=\"col-md-9 ms-sm-auto col-lg-10 px-md-4\">\n            \n            <StateProvider>\n              \n              <Dropdown />\n\n              \n              \n              <br /><br />\n              \n              <Cases />\n              \n            </StateProvider>\n      \n            \n\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}